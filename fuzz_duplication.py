#!/usr/bin/env python3

import zmq, json
import os, sys, io, signal
from time import sleep
from threading import Thread

os.system('clear')

req_addr = "tcp://localhost:5577"
fuzz_duplicate = dict()
global flag_update_duplicate

test_buf = [0x21, 0x02, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

rrc_setup_request = [ 0x34, 0x1a, 0x7f, 0x9b, 0xc8, 0x30, 0x46, 0x3f ]

rrc_setup_complete = [ 0x41, 0x0, 0x32, 0xc0, 0x0, 0x0, 0x0, 0x12, 0x10, 
                    0x8, 0x1f, 0x80, 0x10, 0x46, 0x40, 0x3, 0x40, 
                    0x40, 0xbe, 0x16, 0x40, 0x0, 0x0, 0x0, 0x0, 
                    0x0, 0x0, 0x0, 0x4, 0xc4, 0x0, 0x41, 0xcb, 
                    0x82, 0x20, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 
                    0x0, 0x2, 0x46, 0x8a, 0xcf, 0x13, 0x57, 0x80, 
                    0x0, 0x0, 0x0, 0x0, 0x3d, 0x0, 0x3f, 0xf9, 
                    0xf2, 0x36, 0x97, 0xa4, 0xf1, 0x1a, 0xc, 0x3f, 
                    0xda, 0xb3, 0xdb, 0x9e, 0x8b, 0x6d, 0x46, 0x9b, 
                    0xea, 0x22, 0x78, 0x33, 0x55, 0x23, 0x56, 0xe5, 
                    0x5f, 0x53, 0xde, 0xcb, 0x26, 0x39, 0xc4, 0x18, 
                    0x6f, 0x5b, 0xbd, 0x60, 0x76, 0xc9, 0x9f, 0x50, 
                    0x7c, 0x7a, 0xee, 0x8, 0xe7, 0x34, 0xa3, 0xd1, 
                    0x57, 0x1b, 0x4, 0xac, 0x3e, 0x5a, 0x91, 0x9d, 
                    0xae, 0x6f, 0x68 ]

rrc_setup_complete_reg_request = [ 0x41, 0x0, 0x32, 0xc0, 0x0, 0x0, 0x0, 0x12, 0x10, 
                                    0x8, 0x1f, 0x80, 0x10, 0x46, 0x40, 0x3, 0x40, 
                                    0x40, 0xbe, 0x16, 0x40, 0x0, 0x0, 0x0, 0x0, 
                                    0x0, 0x0, 0x0, 0x4, 0xc4, 0x0, 0x41, 0xcb, 
                                    0x82, 0x20, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 
                                    0x0, 0x2, 0x46, 0x8a, 0xcf, 0x13, 0x57, 0x80, 
                                    0x0, 0x0, 0x0, 0x0, 0x3d, 0x0, 0x3f, 0x37, 
                                    0x7d, 0xa, 0x40, 0x21, 0x4f, 0x9c, 0x5, 0x52, 
                                    0x25, 0x75, 0x57, 0xba, 0x6b, 0xb9, 0x17, 0xc6, 
                                    0x23, 0xe4, 0x40, 0x5c, 0x11, 0xe, 0xa5, 0x14, 
                                    0xf2, 0xa7, 0xac, 0x82, 0xb8, 0xf2, 0xb9, 0x35, 
                                    0xfc, 0xf9, 0x57, 0x4b, 0x95, 0x5c, 0x9d, 0xbb, 
                                    0xd2, 0xf4, 0x75, 0x3d, 0xae, 0x8c, 0x4, 0xd1, 
                                    0x70, 0x44, 0x2d, 0x82, 0x52, 0xd2, 0x96, 0x45, 
                                    0x79, 0x42, 0xc7 ]

rrc_ue_capability_information = [ 0x41, 0x0, 0x5f, 0xc0, 0x4, 0x0, 0x4, 0x4c, 0x82, 
                                    0x14, 0xf8, 0x68, 0x4, 0x0, 0x1, 0xd3, 0xd6, 
                                    0x84, 0xc0, 0x80, 0x0, 0x81, 0x50, 0x1, 0x20, 
                                    0x93, 0x16, 0x0, 0x9, 0x83, 0x50, 0x70, 0x13, 
                                    0x60, 0x18, 0x73, 0xe6, 0x18, 0xf2, 0x85, 0x81, 
                                    0xc1, 0x30, 0x8, 0xc, 0x47, 0x0, 0x2a, 0xd, 
                                    0x89, 0xba, 0xc1, 0x18, 0x43, 0x41, 0x2, 0xf, 
                                    0x94, 0xe, 0x5, 0x96, 0xc9, 0x8a, 0xa1, 0xa1, 
                                    0xcf, 0x88, 0xe3, 0xd0, 0x33, 0xec, 0x9, 0xf1, 
                                    0x8e, 0x7c, 0xc3, 0x1e, 0x50, 0xb0, 0x38, 0x1c, 
                                    0x3c, 0x17, 0x0, 0x5, 0xf0, 0x1, 0xc0, 0x1, 
                                    0x7c, 0x0, 0xf, 0x20, 0x0, 0xfc, 0x68, 0x99, 
                                    0xb6, 0x3d, 0x0, 0x3f, 0x96, 0x6d, 0xae, 0xe, 
                                    0x54, 0x15, 0xca, 0x52, 0x25, 0xbb, 0x1e, 0x85, 
                                    0x7d, 0x14, 0xfc ]

nas_auth_rsp = [ 0x41, 0x0, 0x3, 0x0, 0x1, 0x0, 0x41, 0x0, 0x20, 
                    0xc0, 0x1, 0x0, 0x1, 0x3a, 0xa, 0xbf, 0x0, 
                    0x2b, 0x96, 0x88, 0x4f, 0x19, 0xe6, 0xfa, 0x36, 
                    0x74, 0x36, 0xa9, 0xa1, 0x2c, 0x23, 0x9a, 0xe4, 
                    0x18, 0xd5, 0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 
                    0x3d, 0x0, 0x3f, 0x18, 0x50, 0x5a, 0xd8, 0xc3, 
                    0xf1, 0xaf, 0x2c, 0x97, 0x8c, 0x9c, 0x47, 0x53, 
                    0xec, 0xbf, 0x0, 0xbe, 0x11, 0x3a, 0xd0, 0x51, 
                    0xe1, 0xa6, 0x35, 0xe, 0xf7, 0x72, 0xe9, 0x77, 
                    0x8a, 0xc9, 0x8f, 0xda, 0x24, 0x68, 0x9d, 0x15, 
                    0x17, 0xca, 0xad, 0xa4, 0x66, 0xf4, 0xf7, 0x52, 
                    0xb3, 0xf7, 0x10, 0xc4, 0x31, 0xe0, 0x15, 0x12, 
                    0x87, 0x4a, 0x20, 0x7e, 0xbc, 0xa, 0xf5, 0x46, 
                    0xd3, 0x85, 0x20, 0xf7, 0xed, 0xbe, 0xd, 0x4, 
                    0x88, 0xba, 0xa8 ]

nas_sec_mode_complete = [0x41, 0x0, 0x3, 0x0, 0x3, 0x0, 0x41, 0x0, 0xa, 
                        0xc0, 0x3, 0x0, 0x3, 0x2a, 0x0, 0xd7, 0xe0, 
                        0x9, 0xa2, 0x3d, 0x0, 0x3f, 0x59, 0x38, 0xe3, 
                        0x34, 0x55, 0xe5, 0x24, 0x1f, 0xd0, 0x15, 0xa3, 
                        0xff, 0xf5, 0x51, 0x9, 0xe3, 0xc0, 0x36, 0x7b, 
                        0x4a, 0x70, 0x31, 0x85, 0xb5, 0x54, 0x8a, 0x5e, 
                        0x4c, 0xc8, 0x4a, 0x2a, 0x22, 0x82, 0xd, 0x56, 
                        0xd7, 0xf2, 0x7b, 0xf7, 0xc3, 0x90, 0x9a, 0xc2, 
                        0x85, 0xec, 0xcb, 0x68, 0xac, 0x1, 0xe3, 0xf6, 
                        0x72, 0x14, 0x7b, 0x27, 0x68, 0x5, 0x85, 0xb4, 
                        0xce, 0xcf, 0xdf, 0xf0, 0x51, 0xec, 0x46, 0x28, 
                        0xdf, 0xc1, 0x1f, 0xa2, 0x51, 0xba, 0x64, 0xd7, 
                        0xa6, 0x2f, 0x3f, 0x52, 0x31, 0x23, 0x49, 0xa3, 
                        0x37, 0xc4, 0xca, 0xa0, 0xca, 0x4f, 0x54, 0x98, 
                        0x1e, 0x33, 0x88]

mac_short_bsr = [0x44, 0x0, 0x45, 0x0, 0x1, 0xc2, 0x0, 0xb, 0xa0, 
                    0x0, 0xc, 0x38, 0x0, 0x57, 0xff, 0xff, 0x2, 
                    0x0, 0xd, 0xb8, 0x0, 0x57, 0xff, 0xff, 0x2, 
                    0x0, 0xe, 0xf8, 0x0, 0x57, 0xff, 0xff, 0x2, 
                    0x0, 0x13, 0x38, 0x0, 0x57, 0xff, 0xff, 0x2, 
                    0x0, 0x14, 0x38, 0x0, 0x57, 0xff, 0xff, 0x2, 
                    0x0, 0x15, 0x78, 0x0, 0x57, 0xff, 0xff, 0x2, 
                    0x0, 0x18, 0x78, 0x0, 0x57, 0xff, 0xff, 0x2, 
                    0x0, 0x1a, 0x90, 0x0, 0x57, 0xff, 0xff, 0x3d, 
                    0x0, 0x3f, 0x3f, 0xdb, 0xd9, 0x2, 0xcd, 0xf4, 
                    0x46, 0xb3, 0x6f, 0xe2, 0xe5, 0x9b, 0x41, 0xe8, 
                    0xd, 0x90, 0x61, 0xf7, 0x8e, 0xf8, 0x99, 0x7, 
                    0x5b, 0x5c, 0x67, 0x1, 0x5c, 0xbc, 0x4b, 0x34, 
                    0x62, 0x8a, 0x10, 0x3b, 0x8d, 0xdd, 0x30, 0xd3, 
                    0x91, 0x9f, 0xb5]

mac_long_bsr = [0x44, 0x0, 0x46, 0x0, 0x1, 0xc2, 0x0, 0xb, 0xa0, 
                    0x0, 0xc, 0x38, 0x0, 0x57, 0xff, 0xff, 0x2, 
                    0x0, 0xd, 0xb8, 0x0, 0x57, 0xff, 0xff, 0x2, 
                    0x0, 0xe, 0xf8, 0x0, 0x57, 0xff, 0xff, 0x2, 
                    0x0, 0x13, 0x38, 0x0, 0x57, 0xff, 0xff, 0x2, 
                    0x0, 0x14, 0x38, 0x0, 0x57, 0xff, 0xff, 0x2, 
                    0x0, 0x15, 0x78, 0x0, 0x57, 0xff, 0xff, 0x2, 
                    0x0, 0x18, 0x78, 0x0, 0x57, 0xff, 0xff, 0x2, 
                    0x0, 0x1a, 0x98, 0x0, 0x57, 0xff, 0xff, 0x2, 
                    0x3e, 0x1, 0x0, 0x3f, 0x7d, 0x85, 0xdf, 0xf7, 
                    0xc7, 0x37, 0x50, 0x7b, 0x20, 0x69, 0xb6, 0xfb, 
                    0x63, 0x6b, 0xed, 0x3f, 0xe1, 0x5e, 0x2b, 0x51, 
                    0x76, 0xb5, 0x22, 0x84, 0xba, 0x60, 0x5a, 0x24, 
                    0xf9, 0x25, 0x38, 0x76, 0xab, 0x18, 0x6d, 0x72, 
                    0x4f, 0xbd, 0xed]

rlc_control_status_pdu = [0x41, 0x0, 0x3, 0x0, 0x4, 0x0, 0x3d, 0x0, 0x3f, 
                            0x4c, 0xd2, 0x29, 0x33, 0x0, 0x81, 0x70, 0xcd, 
                            0x9f, 0x22, 0x23, 0xb6, 0x6c, 0xcc, 0x85, 0x61, 
                            0x8e, 0x22, 0x50, 0x48, 0xa9, 0x5d, 0x27, 0xe5, 
                            0xe9, 0x87, 0xd3, 0x38, 0xc1, 0x46, 0xbc, 0xd, 
                            0x18, 0xe6, 0x40, 0x18, 0x67, 0xb0, 0xe5, 0x6, 
                            0xd3, 0x8, 0xbc, 0x3f, 0xd5, 0x41, 0xa0, 0x63, 
                            0x64, 0xf0, 0xab, 0xd, 0x4d, 0xd3, 0xf2, 0x36, 
                            0x5a, 0xc5, 0x6e, 0x1b, 0xb, 0x2b, 0x29, 0x23, 
                            0x11, 0x69, 0x3b, 0x78, 0x1a, 0x21, 0x7e, 0xed, 
                            0x29, 0x3b, 0x2c, 0xfe, 0x7c, 0xcc, 0x62, 0xe0, 
                            0xbc, 0xd, 0xee, 0xa, 0xe0, 0xe0, 0x40, 0x3a, 
                            0xa6, 0xaf, 0x56, 0xb1, 0xda, 0x7f, 0xd5, 0xeb, 
                            0xe8, 0x10, 0x63, 0x2, 0x31, 0xe1, 0xef, 0x5b, 
                            0x1c, 0x1b, 0x59]

nas_pdu_session_establishment_req = [0x41, 0x0, 0x2e, 0xc0, 0x7, 0x0, 0x7, 0x3a, 0x11, 
                                        0xbf, 0x2, 0x35, 0xb3, 0xb9, 0x18, 0x0, 0x3f, 
                                        0x0, 0x33, 0x80, 0x80, 0x3, 0x97, 0x5, 0x0, 
                                        0xe0, 0xff, 0xff, 0xc8, 0x89, 0x5, 0x40, 0x91, 
                                        0x2, 0x0, 0x80, 0x0, 0x0, 0x92, 0x82, 0x2, 
                                        0x37, 0xb0, 0xb4, 0x80, 0xa2, 0x28, 0x4c, 0x18, 
                                        0x3d, 0x0, 0x3f, 0xbb, 0x2d, 0x2a, 0x64, 0xc7, 
                                        0xf2, 0x1e, 0x89, 0xf8, 0x24, 0x8b, 0x39, 0x3, 
                                        0x12, 0xd0, 0xb1, 0xee, 0xde, 0x6a, 0x71, 0xd8, 
                                        0x1a, 0xb, 0x56, 0xe9, 0x29, 0x39, 0xa3, 0xd4, 
                                        0x77, 0x32, 0x90, 0xa4, 0x5c, 0xf4, 0x6b, 0x4e, 
                                        0x12, 0xf5, 0x46, 0x36, 0x80, 0x80, 0x3a, 0x92, 
                                        0x50, 0xeb, 0x80, 0x2e, 0x56, 0xf2, 0x6, 0x70, 
                                        0xfd, 0x5c, 0x5a, 0x26, 0x95, 0xfd, 0xfb, 0xd, 
                                        0x2f, 0x8b, 0xb1 ]

mac_power_headroom = [0x3e, 0x1, 0x0, 0x39, 0x3b, 0x32, 0x3f, 0x21, 0x21, 
                        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
                        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
                        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
                        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
                        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
                        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
                        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
                        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
                        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
                        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
                        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
                        0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 
                        0x21]

def new_duplicate(sdu_len=0, pdu_buf=list()):
    fuzz_duplicate = {'rlc_len':sdu_len, 'mac_buf':pdu_buf, 'mac_len':len(pdu_buf)}
    sjson_duplicate = json.dumps(fuzz_duplicate)
    return sjson_duplicate


## request thread
def handle_req_thread(context, ): 
    print("Connecting to rep server…")
    req_sock = context.socket(zmq.REQ)
    req_sock.connect(req_addr)
    print("Connected to rep server")

    flag_update_duplicate = True

    while True:
        if flag_update_duplicate:
            pdu = mac_power_headroom
            # pdu[4] = pdu[4] + 1
            # pdu[3] = pdu[3] + 1
            # pdu[10] = pdu[10] + 1
            req_str = new_duplicate(sdu_len=len(pdu), pdu_buf=pdu)   
            print("req_duplicate:", req_str);
            req_sock.send(req_str.encode('utf-8'))
            rcv_str = req_sock.recv()

            print("rcv_duplicate:", rcv_str);
            # if rcv_str == b"update_succeed":
            #     flag_update_duplicate = False

        # sleep(0.1)

    req_sock.close()



if __name__ == '__main__':
    
    try:
        signal.signal(signal.SIGINT, quit)
        signal.signal(signal.SIGTERM, quit)

        context = zmq.Context()
        
        # request thread
        req_thread = Thread(target=handle_req_thread, args=(context, ))
        req_thread.start()

    except Exception: 
        context.term()
        print()
